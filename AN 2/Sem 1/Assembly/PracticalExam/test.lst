     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  extern scanf, printf, gets
    13                                  import scanf msvcrt.dll
    14                                  import printf msvcrt.dll
    15                                  import gets msvcrt.dll
    16                                  segment data use32 class=data
    17                                      ; ...
    18 00000000 256400                      formatdec db '%d',0
    19 00000003 61203D2000                  amsg db 'a = ',0
    20 00000008 62203D2000                  bmsg db 'b = ',0
    21 0000000D 63203D2000                  cmsg db 'c = ',0
    22 00000012 0000                        a dw 0
    23 00000014 0000                        b dw 0
    24 00000016 00000000                    c dd 0
    25                                      
    26                                  
    27                                  ; our code starts here
    28                                  segment code use32 class=code
    29                                      start:
    30                                          ; 
    31 00000000 68[03000000]                    push dword amsg
    32 00000005 FF15[00000000]                  call[printf]
    33 0000000B 83C404                          add esp ,4*1
    34                                          
    35 0000000E 68[12000000]                    push dword a
    36 00000013 68[00000000]                    push formatdec
    37 00000018 FF15[00000000]                  call [scanf]
    38 0000001E 83C408                          add esp, 4*2
    39                                          
    40 00000021 68[08000000]                     push dword bmsg
    41 00000026 FF15[00000000]                  call[printf]
    42 0000002C 83C404                          add esp ,4*1
    43                                          
    44 0000002F 68[14000000]                    push dword b
    45 00000034 68[00000000]                    push formatdec
    46 00000039 FF15[00000000]                  call [scanf]
    47 0000003F 83C408                          add esp, 4*2
    48                                          
    49 00000042 68[0D000000]                     push dword cmsg
    50 00000047 FF15[00000000]                  call[printf]
    51 0000004D 83C404                          add esp ,4*1
    52                                          
    53 00000050 68[16000000]                    push dword c
    54 00000055 68[00000000]                    push formatdec
    55 0000005A FF15[00000000]                  call [scanf]
    56 00000060 83C408                          add esp, 4*2
    57                                          
    58 00000063 66A1[12000000]                  mov ax, [a]
    59 00000069 668B1D[14000000]                mov bx, [b]
    60 00000070 66F7EB                          imul bx; result dx:ax
    61                                          
    62 00000073 6652                            push dx
    63 00000075 6650                            push ax
    64 00000077 58                              pop eax
    65                                          
    66 00000078 8B0D[16000000]                  mov ecx, [c]
    67 0000007E 01C8                            add eax, ecx
    68                                      
    69                                          ; exit(0)
    70 00000080 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    71 00000082 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
