     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  
    13                                  ;Compute the doubleword D as follows, A word, B word, C word
    14                                  ;   the bits 8-15 are the same as the bits of C
    15                                  ;   the bits 0-7 are the same as the bits 8-15 of B
    16                                  ;   the bits 24-31 are the same as the bits 0-7 of A
    17                                  ;   the bits 16-23 are the same as the bits 8-15 of A
    18                                  segment data use32 class=data
    19                                      ; ...
    20 00000000 1101                        a dw 0000_0001_0001_0001b ;a = 273
    21 00000002 A107                        b dw 0000_0111_1010_0001b ;b = 1953
    22 00000004 4108                        c dw 0000_1000_0100_0001b ;c = 2113
    23 00000006 00000000                    d dd 0; 
    24                                      ;0001_0001_0000_0001_0000_1000_0000_0111
    25                                  
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29                                          ; initialisation
    30 00000000 BB00000000                      mov EBX, 0 ;the results will be in BX
    31 00000005 B800000000                      mov eax, 0
    32                                          
    33                                          ;operation 1: b8-15 D = b8-15 C
    34 0000000A 66A1[04000000]                  mov AX, [c] 
    35 00000010 2500FF0000                      and eax,0000_0000_000_0000_1111_1111_0000_0000b ; we isolate the bits 8-15 EAX = 0000_0000_0000_0000_0000_1000_0000_0000b
    36 00000015 09C3                            or ebx, eax; EBX0000_0000_0000_0000_0000_1000_0000_0000b
    37                                          
    38                                          ;operation 2: b0-7 D = b8-15 B
    39 00000017 B800000000                      mov eax,0
    40 0000001C 66A1[02000000]                  mov ax, [b]
    41 00000022 2500FF0000                      and eax,0000_0000_0000_0000_1111_1111_0000_0000b ; we isolate the bits 8-15 EAX = 0000_0000_0000_0000_0000_0111_0000_0000b
    42 00000027 B108                            mov cl,8; the difference is 8 so we rotate to the right with 8
    43 00000029 D3C8                            ror eax, cl; AX = 0000_0000_0000_0000_0000_0000_0000_0111b
    44 0000002B 09C3                            or ebx, eax; BX = 0000_0000_0000_0000_0000_1000_0000_0111b
    45                                          
    46                                          ;operation 3: b24-31 D = b0-7A
    47 0000002D B800000000                      mov eax, 0
    48 00000032 66A1[00000000]                  mov ax,[a]
    49 00000038 25FF000000                      and eax, 0000_0000_0000_0000_0000_0000_1111_1111b 
    50 0000003D C1C018                          rol eax,24
    51 00000040 09C3                            or ebx, eax
    52                                          
    53                                          ;operation 4: b16-23 D = 8-15 A
    54 00000042 B800000000                      mov eax,0
    55 00000047 66A1[00000000]                  mov ax,[a]
    56 0000004D 2500FF0000                      and eax,0000_0000_0000_0000_1111_1111_0000_0000b 
    57 00000052 C1C008                          rol eax, 8
    58 00000055 09C3                            or ebx,eax
    59                                          
    60 00000057 891D[06000000]                  mov [d],ebx ; D = 0001_0001_0000_0001_0000_1000_0000_0111
    61                                          ; exit(0)
    62 0000005D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    63 0000005F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
