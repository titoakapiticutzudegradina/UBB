     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  extern scanf, printf, gets
    13                                  import scanf msvcrt.dll
    14                                  import printf msvcrt.dll
    15                                  import gets msvcrt.dll
    16                                  
    17                                  segment data use32 class=data
    18                                      ; ...
    19                                      
    20 00000000 496E73657274206120-         msgstart db 'Insert a string of characters: ', 0
    20 00000009 737472696E67206F66-
    20 00000012 206368617261637465-
    20 0000001B 72733A2000         
    21 00000020 <res 00000014>              initialstring resb 20
    22 00000034 546865206E65772073-         printresult db 'The new string is: ',0
    22 0000003D 7472696E672069733A-
    22 00000046 2000               
    23 00000048 <res 00000014>              newstring resb 20
    24 0000005C 58                          x db 'X'
    25                                  
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29                                          ; start msg
    30                                         
    31                                          
    32 00000000 68[00000000]                    push msgstart
    33 00000005 FF15[00000000]                  call [printf]
    34 0000000B 83C404                          add esp, 4*1
    35                                          
    36                                          ;read string
    37                                          
    38 0000000E 68[20000000]                    push dword initialstring
    39 00000013 FF15[00000000]                  call [gets]
    40 00000019 83C404                          add esp, 4*1
    41                                  
    42                                          
    43                                          
    44                                          ;change c with X
    45 0000001C B900000000                      mov ecx, 0
    46 00000021 B90F000000                      mov ecx,15
    47 00000026 BE00000000                      mov esi, 0
    48 0000002B BF00000000                      mov edi, 0
    49                                          
    50 00000030 B36D                            mov bl, 'm'
    51 00000032 B258                            mov dl,  'X'
    52                                          
    53                                          repet:
    54 00000034 8A86[20000000]                      mov al, [initialstring+ esi]
    55 0000003A 38D8                                cmp al,bl
    56 0000003C 7402                                je change
    57 0000003E 7509                                jne notchange
    58                                                  change:
    59 00000040 8897[48000000]                              mov [newstring+edi], dl
    60 00000046 47                                          inc edi
    61 00000047 EB07                                        jmp final
    62                                                      notchange:
    63 00000049 8887[48000000]                                  mov [newstring+edi],al
    64 0000004F 47                                              inc edi
    65                                                   final:
    66 00000050 46                                          inc esi
    67 00000051 E2E1                            loop repet
    68                                          
    69                                          ;print result
    70 00000053 68[34000000]                    push printresult
    71 00000058 68[48000000]                    push dword newstring
    72 0000005D FF15[00000000]                  call [printf]
    73 00000063 83C408                          add esp, 4*2
    74                                      
    75                                          ; exit(0)
    76 00000066 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    77 00000068 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
